name: Provision AWS ECR, build and push image to AWS ECR

on:
  pull_request:
    branches:
      - develop
  release:
    types:
      - published
  workflow_dispatch:


jobs:
  provision-aws-ecr:
    name: Provision AWS ECR with terraform
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      pull-requests: write
    defaults:
      run:
        working-directory: .github/terraform-ecr/
    env:
      AWS_REGION: eu-central-1

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.1.8

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-duration-seconds: 900
          aws-region: ${{ env.AWS_REGION }}

      - name: Initialize Terraform
        id: init
        env:
          TF_STATE_BUCKET: ${{ secrets.AWS_TF_STATE_BUCKET }}
          TF_STATE_OBJECT_KEY: ${{ secrets.AWS_TF_STATE_OBJECT_KEY }}
        run: |
          terraform init \
            -backend-config="bucket=$TF_STATE_BUCKET" \
            -backend-config="key=$TF_STATE_OBJECT_KEY" \
            -backend-config="region=$AWS_REGION" \
            -backend-config="encrypt=true"

      - name: Validate Terraform
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -no-color \
            -var="aws_region=$AWS_REGION"
        continue-on-error: true

      - name: Terraform Apply
        id: apply
        run: |
          terraform apply -auto-approve -no-color \
            -var="aws_region=$AWS_REGION"

      - name: Add PR comments
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request' && always()
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
          APPLY: "terraform\n${{ steps.apply.outputs.stdout }}"
        with:
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            #### Terraform Apply üöÄ\`${{ steps.apply.outcome }}\`
            <details><summary>Show Apply</summary>

            \`\`\`\n
            ${process.env.APPLY}
            \`\`\`

            </details>
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
