name: Terraform workflow

on:
  workflow_call:
    outputs:
      terraform_output:
        value: ${{ jobs.reusable_terraform_job.outputs.terraform_output }}
    inputs:
      AWS_REGION:
        required: true
        type: string
      TERRAFORM_ROOT_PATH:
        required: true
        type: string
      ENVIRONMENT:
        required: false
        type: string
      APP_IMAGE_TAG:
        required: false
        type: string
    secrets:
      AWS_ROLE_TO_ASSUME:
        required: true
      AWS_TF_STATE_BUCKET:
        required: true
      AWS_TF_STATE_OBJECT_KEY:
        required: true
      TF_VAR_DB_USERNAME:
        required: false
      TF_VAR_DB_PASSWORD:
        required: false


jobs:
  reusable_terraform_job:
    name: Terraform deploy/update infrastructure
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      pull-requests: write
    environment:
      name: ${{ inputs.ENVIRONMENT }}
      url: ${{ steps.environment-url.outputs.environment_url }}
    outputs: 
      terraform_output: ${{ steps.terraform-output.outputs.terraform_output }}
    defaults:
      run:
        working-directory: ${{ inputs.TERRAFORM_ROOT_PATH }}
    env:
      AWS_REGION: ${{ inputs.AWS_REGION }}
      APP_IMAGE_TAG: ${{ inputs.APP_IMAGE_TAG }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.1.8

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-duration-seconds: 900
          aws-region: ${{ env.AWS_REGION }}

      - name: Initialize Terraform
        id: init
        env:
          TF_STATE_BUCKET: ${{ secrets.AWS_TF_STATE_BUCKET }}
          TF_STATE_OBJECT_KEY: ${{ secrets.AWS_TF_STATE_OBJECT_KEY }}
        run: |
          terraform init \
            -backend-config="bucket=$TF_STATE_BUCKET" \
            -backend-config="key=$TF_STATE_OBJECT_KEY" \
            -backend-config="region=$AWS_REGION" \
            -backend-config="encrypt=true"

      - name: Validate Terraform
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        env:
          TF_VAR_db_username: ${{ secrets.TF_VAR_DB_USERNAME }}
          TF_VAR_db_password: ${{ secrets.TF_VAR_DB_PASSWORD }}
          TF_VAR_image_tag: ${{ env.APP_IMAGE_TAG }}
        run: |
          terraform plan -no-color
        continue-on-error: true

      - name: Terraform Apply
        id: apply
        env:
          TF_VAR_db_username: ${{ secrets.TF_VAR_DB_USERNAME }}
          TF_VAR_db_password: ${{ secrets.TF_VAR_DB_PASSWORD }}
          TF_VAR_image_tag: ${{ env.APP_IMAGE_TAG }}
        run: |
          terraform apply -auto-approve -no-color

      - name: Terraform Output
        id: terraform-output
        run:  |
          TF_OUTPUT=$(terraform-bin output -no-color -json | jq tostring)
          echo "::set-output name=terraform_output::$TF_OUTPUT"

      - name: Environment URL
        id: environment-url
        if: ${{ inputs.ENVIRONMENT }}
        run: |
          echo "::set-output name=environment_url::http://$(echo ${{ steps.terraform-output.outputs.terraform_output }} | jq -r .alb_app_dns.value)"

      - name: Add PR comments
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
          APPLY: "terraform\n${{ steps.apply.outputs.stdout }}"
        with:
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
            })

            // 2. Prepare format of the comment
            const output = `#### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
            #### Terraform Validation 🤖\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            #### Terraform Apply 🚀\`${{ steps.apply.outcome }}\`
            <details><summary>Show Apply</summary>

            \`\`\`\n
            ${process.env.APPLY}
            \`\`\`

            </details>
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }